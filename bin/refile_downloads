#!/usr/bin/env python3

"""
Re-file (move) downloaded PDFs based on the date in the filename.
"""

import argparse
import re
import sys
from collections import OrderedDict, defaultdict
from datetime import date, datetime, timedelta
from pathlib import Path

source = Path("~/Downloads").expanduser()
destination = Path("~/Dropbox/Mail/byDate").expanduser()

patterns = [
    (re.compile(r"\d{8}"), "%Y%m%d"),
    (re.compile(r"\d{6}"), "%Y%m"),
    (re.compile(r"\d{4}-\d{2}-\d{2}"), "%Y-%m-%d"),
    (re.compile(r"\d{4}-\d{2}"), "%Y-%m"),
    (re.compile(r"\d{2}-\d{2}-\d{4}"), "%m-%d-%Y"),
    (re.compile(r"\d{2}_\d{2}_\d{4}"), "%m_%d_%Y"),
]

one_week_ago = (datetime.now() - timedelta(weeks=1)).timestamp()

_this_year = date.today().year
years_str = [str(_this_year - idx) for idx in range(5)]
year_re = re.compile(r"\d{4}")

short_month_names = "jan feb mar apr may jun jul aug sep oct nov dec".split()


def find_date_in_name(filename_or_path):
    filename = str(filename_or_path).lower()
    for regex, layout in patterns:
        match = regex.search(filename)
        if match is None:
            continue
        try:
            dt = datetime.strptime(match.group(), layout)
            return dt.date().replace(day=1)
        except ValueError:
            pass

    match = year_re.search(filename)
    if match is not None and match.group() in years_str:
        for idx, month in enumerate(short_month_names, 1):
            if month in filename:
                try:
                    return date(int(match.group()), idx, 1)
                except ValueError:
                    pass

    return None


def find_moves(forever=False):
    res = defaultdict(list)

    # Find PDF files
    candidates = source.glob("*.[pP][dD][fF]")
    for filename in candidates:
        # Skip files that are too old
        if not forever and filename.stat().st_mtime < one_week_ago:
            continue

        # Look for embedded date; skip files without one
        month = find_date_in_name(filename)
        if month is None:
            continue

        res[month].append(filename)
    return res


def prepare_moves(moves):
    final_moves = OrderedDict()
    for month in sorted(moves):
        dest_dir = destination / "{:%Y}".format(month) / "{:%Y-%m}".format(month)
        source_paths = sorted(moves[month], key=lambda path: str(path))
        items = [
            (source_path, dest_dir / source_path.name)
            for source_path in source_paths
        ]
        final_moves[month] = items
    return final_moves


def show_moves(moves):
    for month, items in moves.items():
        first = True
        for source_path, target_path in items:
            if target_path.exists():
                if (source_path.stat().st_size == target_path.stat().st_size and
                    source_path.read_bytes() == target_path.read_bytes()):
                    clobber = f" [replaces identical {target_path}]"
                else:
                    clobber = f" [CLOBBERS {target_path}]"
            else:
                clobber = ""
            new_dir = " " if target_path.parent.exists() else "*"
            if first:
                lead = "{:%Y-%m} <- ".format(month)
                first = False
            else:
                lead = "           "
            print(f"{new_dir}{lead}{source_path}{clobber}")


def perform_moves(moves):
    for month, items in moves.items():
        for source_path, target_path in items:
            if not target_path.parent.exists():
                target_path.parent.mkdir(parents=True, exist_ok=True)
            source_path.rename(target_path)


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-f", "--force", help="Perform the displayed moves", action="store_true"
    )
    parser.add_argument(
        "--forever", help="Move any matching files, not just new-ish files", action="store_true"
    )

    args = parser.parse_args()

    moves = find_moves(forever=args.forever)

    if not moves:
        print("Nothing to re-file.", file=sys.stderr)
        return

    final_moves = prepare_moves(moves)

    print(f"Move target is {destination}")
    show_moves(final_moves)
    if args.force:
        perform_moves(final_moves)
    else:
        print("\nUse -f / --force to perform these moves", file=sys.stderr)


if __name__ == "__main__":
    main()
