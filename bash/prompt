#!/hint/bash
# Initialization for interactive shells

# Colors
# https://github.com/sapegin/dotfiles/blob/bash/tilde/bash_profile.bash
# https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes
if [ -t 1 ]; then
    BLACK="$(tput setaf 0)"
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    GREENBG="$(tput setab 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    MAGENTA="$(tput setaf 5)"
    CYAN="$(tput setaf 6)"
    WHITE="$(tput setaf 7)"
    GRAY="$(tput setaf 8)"
    BOLD="$(tput bold)"
    GRAYFG="$(tput setaf 238)"
    UNDERLINE="$(tput sgr 0 1)"
    INVERT="$(tput sgr 1 0)"
    NOCOLOR="$(tput sgr0)"
fi
LINE=$(printf "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500%.0s" {1..200})

# Must set this for every shell invocation, not just once in the environment.
# Exit code stuff must be first, but Apple Terminal sticks something in front.
# Adapted from https://github.com/jimeh/git-aware-prompt/blob/master/prompt.sh
# and https://github.com/sapegin/dotfiles/blob/bash/includes/bash_prompt.bash
prompt_command() {
    # Exit code
    local EXIT="$?"
    local exit_prompt=
    if [ ${EXIT} != 0 ]; then
        exit_prompt="${RED}(${EXIT})${NOCOLOR} "
    fi

    # Maybe newline
    if [[ $INSIDE_EMACS != *comint* ]]; then
        ( IFS=';' read -sdR -p $'\E[6n' ROW COL;
          (("${COL#*[}" > 1 )) && echo $(tput smso)%$(tput rmso); )
    fi

    # Git
    # Based on: http://stackoverflow.com/a/13003854/170413
    local git_info=
    local branch
    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
        if [[ "$branch" == "HEAD" ]]; then
            branch="${RED}detached"'*'"${NOCOLOR}"
        fi

        local status=$(git status --porcelain 2> /dev/null)
        if [[ "$status" != "" ]]; then
            git_info="${YELLOW}($branch*)${NOCOLOR} "
        else
            git_info="${GREEN}($branch)${NOCOLOR} "
        fi
    fi

    # Kube context
    local kctx_prompt=
    if [ -n "$KUBECONFIG" ]; then
        kctx_prompt="${MAGENTA}$(basename $(basename ${KUBECONFIG} .yaml) .knaut)${NOCOLOR} "
    else
        kctx_prompt="${MAGENTA}$(kubectl config view -o=jsonpath='{.current-context}')${NOCOLOR} "
    fi

    # Virtualenv
    local venv_prompt=
    if [ -n "$VIRTUAL_ENV" ]; then
        venv_prompt="${BLUE}$(basename ${VIRTUAL_ENV})${NOCOLOR} "
    fi

    # Local? SSH?
    local remote=
    [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && remote=1

    # Hostname
    local myhost="${HOSTNAME%%.*}"
    [[ $myhost = ark3-workstation* ]] && myhost="GKE"
    local host_prompt=
    if [ -n "$remote" ]; then
        host_prompt="${BOLD}${MAGENTA}[${myhost}]${NOCOLOR} "
    fi
    # This is supposed to display the hostname in the window or tab title.
    # However, the test is not quite right. The VSCode terminal (for example)
    # shows the hostname inline.
    # if [[ $TERM = screen* ]] || [ -n "$STY" ] || [ -n "$TMUX" ]; then
    #     printf "\033k${myhost}\033\\"
    # fi

    history -a
    local line_prompt=${LINE:0:$(tput cols)}
    local time_prompt="$BLACK$GREENBG \A $NOCOLOR "
    local dir_prompt="\w"

    PS1="${GRAYFG}${line_prompt}${NOCOLOR}\r"
    PS1+="${time_prompt}$host_prompt$kctx_prompt$venv_prompt$git_info$exit_prompt${dir_prompt} \n"
    PS1+="\[${GREEN}\]$ \[${NOCOLOR}\]"
    if [ -n "$PROMPT_QUIET" ]; then
	PS1="\[${GREEN}\]$ \[${NOCOLOR}\]"
    fi

    PS2='\[${GREEN}\]> \[${NOCOLOR}\]'  # Prompt for subsequent lines
    PS4='\[${GREEN}\]+ \[${NOCOLOR}\]'  # Prefix for "set -x"
}

export PROMPT_COMMAND=prompt_command

shopt -s cdspell checkhash checkwinsize cmdhist extglob histappend hostcomplete interactive_comments
