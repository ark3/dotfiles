#!/hint/bash

# Colors
# https://github.com/sapegin/dotfiles/blob/bash/tilde/bash_profile.bash
# https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes
if [ -t 1 ]; then
    BLACK="$(tput setaf 0)"
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    GREENBG="$(tput setab 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    MAGENTA="$(tput setaf 5)"
    CYAN="$(tput setaf 6)"
    WHITE="$(tput setaf 7)"
    GRAY="$(tput setaf 8)"
    BOLD="$(tput bold)"
    GRAYFG="$(tput setaf 238)"
    UNDERLINE="$(tput sgr 0 1)"
    INVERT="$(tput sgr 1 0)"
    NOCOLOR="$(tput sgr0)"
fi
LINE=$(printf "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500%.0s" {1..200})

vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_cmd() {
    local vterm_elisp
    vterm_elisp=""
    while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
    done
    vterm_printf "51;E$vterm_elisp"
}


# Prompt/directory tracking for vterm in Emacs
vterm_prompt_end() {
    if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
        printf '\e]%s\e\\' "51;A$(whoami)@$(hostname):$(pwd)"
    fi
}

# Exit code stuff must be first, but Apple Terminal sticks something in front.
# Adapted from https://github.com/jimeh/git-aware-prompt/blob/master/prompt.sh
# and https://github.com/sapegin/dotfiles/blob/bash/includes/bash_prompt.bash
prompt_command() {
    # Exit code
    local EXIT="$?"
    exit_prompt=
    exit_color=${GREEN}
    if [ ${EXIT} != 0 ]; then
        exit_prompt="(${EXIT}) "
        exit_color=${RED}
    fi

    # Maybe newline
    if [[ $INSIDE_EMACS != *comint* ]]; then
        ( IFS=';' read -sdR -p $'\E[6n' ROW COL;
          (("${COL#*[}" > 1 )) && echo $(tput smso)%$(tput rmso); )
    fi

    # Git
    # Based on: http://stackoverflow.com/a/13003854/170413
    git_info=
    git_color=
    local branch
    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
        if [[ "$branch" == "HEAD" ]]; then
	    git_color=${RED}
	    git_color_num=1
            branch='detached*'
        fi  # FIXME do we need an else here?

        local status=$(git status --porcelain 2> /dev/null)
        if [[ "$status" != "" ]]; then
            git_info="($branch*) "
            git_color=${YELLOW}
	    git_color_num=3
        else
            git_info="($branch) "
            git_color=${GREEN}
	    git_color_num=2
        fi
    fi

    # Kube context
    local kubectl=
    if command -v kubectl > /dev/null; then
        kubectl=kubectl
    else
        kubectl=true
    fi
    kctx_prompt=
    if [ -n "$KUBECONFIG" ]; then
        kctx_prompt="$(basename $(basename ${KUBECONFIG} .yaml) .knaut)"
    else
        kctx_prompt="$(${kubectl} config view -o=jsonpath='{.current-context}')"
    fi
    if [ -n "$kctx_prompt" ]; then
        kctx_prompt="${kctx_prompt} "
    fi

    # Virtualenv
    venv_prompt=
    if [ -n "$VIRTUAL_ENV" ]; then
        venv_prompt="$(basename ${VIRTUAL_ENV}) "
    fi

    # Local? SSH?
    local remote=
    [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && remote=1

    # Hostname
    local myhost="${HOSTNAME%%.*}"
    [[ $myhost = ark3-workstation* ]] && myhost="GKE"
    host_prompt=
    if [ -n "$remote" ]; then
        host_prompt="[${myhost}] "
    fi
    # This is supposed to display the hostname in the window or tab title.
    # However, the test is not quite right. The VSCode terminal (for example)
    # shows the hostname inline.
    # if [[ $TERM = screen* ]] || [ -n "$STY" ] || [ -n "$TMUX" ]; then
    #     printf "\033k${myhost}\033\\"
    # fi

    if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
	vterm_cmd set "$host_prompt" "$kctx_prompt" "$venv_prompt" "$git_info" "$git_color_num" "$exit_prompt"
    fi

    history -a                  # append this shell's history to the file
    #history -n                 # read history from the file into this shell
    line_prompt=${LINE:0:$(tput cols)}
    time_prompt=" \A "
    dir_prompt="\w"
}

CLEAN_PROMPT='\[${exit_color}\]$ \[${NOCOLOR}\]\[$(vterm_prompt_end)\]'

FANCY_PROMPT='${GRAYFG}${line_prompt}${NOCOLOR}\r'
FANCY_PROMPT+='${INVERT}${GREEN} \A ${NOCOLOR} '
FANCY_PROMPT+='${BOLD}${MAGENTA}${host_prompt}${NOCOLOR}'
FANCY_PROMPT+='${MAGENTA}${kctx_prompt}${NOCOLOR}'
FANCY_PROMPT+='${BLUE}${venv_prompt}${NOCOLOR}'
FANCY_PROMPT+='${git_color}${git_info}${NOCOLOR}'
FANCY_PROMPT+='${exit_color}${exit_prompt}${NOCOLOR}'
FANCY_PROMPT+='\w \n'
FANCY_PROMPT+="${CLEAN_PROMPT}"

## PS1="$FANCY_PROMPT"
PS1="$CLEAN_PROMPT"
PS2='\[${GREEN}\]> \[${NOCOLOR}\]'  # Prompt for subsequent lines
PS4='\[${GREEN}\]+ \[${NOCOLOR}\]'  # Prefix for "set -x"


# Must set this for every shell invocation, not just once in the environment.
export PROMPT_COMMAND=prompt_command

command -v direnv >/dev/null 2>&1 && eval "$(direnv hook bash)"

shopt -s cdspell checkhash checkwinsize cmdhist extglob histappend hostcomplete interactive_comments
